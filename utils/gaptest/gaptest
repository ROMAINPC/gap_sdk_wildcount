#!/usr/bin/env perl
use strict;
use warnings;
use Data::Dumper qw(Dumper);
use 5.010;


use threads;
use Thread::Queue;

use File::Find;
use File::Basename qw(dirname);
use Cwd  qw(abs_path);
use Cwd;
use Term::ANSIColor;
use lib dirname(abs_path $0) . '/lib';

use Time::Out qw(timeout) ;
use YAML::Tiny;

use gaptest::Loader;

### Implem

my %durations = (
    fast => 0,
    standard => 1,
    long => 2,
    stress => 3,
);

my @test_files_list = ();
my @test_list = ();

my $test_queue = Thread::Queue->new();

my @test_failed : shared;
my @test_passed : shared;
my %test_time : shared;
my $tests_job_counter = 0;
my $tests_nb = 0;
@test_failed = ();
@test_passed = ();

my $basedir : shared;

# stop at first fail
my $stop_first_fail = 0;
my $list_select_tests = 0;

sub push_test_result {
    my $passed = shift;
    my $testname = shift;
    my $seconds = shift;

    lock(@test_failed);
    lock(@test_passed);
    lock(%test_time);
    $test_time{$testname} = $seconds;
    if(!$passed)
    {
        push(@test_failed, $testname);
        if($stop_first_fail)
        {
            die "Test: ".$testname." failed, and first fail stop activated";
        }
    }
    else
    {
        push(@test_passed, $testname);
    }
}


## Exec the run command
sub exc_cmd_make {
    my $os = shift;
    my $platform = shift;
    my $flags = shift;
    my $compile_only = shift;
    my $tags = shift;
    my $pre = shift;
    my $post = shift;
    my $timeout = shift;
    my $target_name = shift;
    my $exec_dir = shift;
    my $res = 0;
    my $make_path = $basedir."/".$exec_dir;
    system ("make -C ".$make_path." ".$flags." PMSIS_OS=".$os." build_dir_ext=".$target_name." clean");
    if($pre == 1)
    {
        `make prepare`;
    }

    my $targets = "all";
    if (not $compile_only)
    {
        $targets = "${targets} run";
    }

    chdir $exec_dir;
    my ($seconds_before, $seconds_after);
    timeout $timeout =>  sub {
        $seconds_before = time();
        say "make  -C ".$make_path." ".$flags." PMSIS_OS=".$os." platform=".$platform." build_dir_ext=".$target_name." $targets";
        $res = system ("make  -C ".$make_path." ".$flags." PMSIS_OS=".$os." platform=".$platform." build_dir_ext=".$target_name." $targets");
        $seconds_after = time();
        $res = $res >>=8;
        say $target_name." : Result is: ".$res;
        if($post == 1)
        {
            $res = `make postrun`;
        }
    };
    my $seconds = $seconds_after - $seconds_before;
    if ($@){
        # operation timed-out
        my $cwd = cwd;
        say "Test ".cwd." variant: ".$target_name." failed with timeout";
    }
    push_test_result(!$res, $target_name,$seconds);

    return $res;
}


## Exec the run command
sub exc_cmd_cmake {
    my $os = shift;
    my $platform = shift;
    my $flags = shift;
    my $compile_only = shift;
    my $tags = shift;
    my $pre = shift;
    my $post = shift;
    my $timeout = shift;
    my $target_name = shift;
    my $exec_dir = shift;
    my $chip = shift;
    my $chip_version = shift;
    my $sdk_root_path = shift;
    my $res = 0;
    my $make_path = $basedir."/".$exec_dir;

    $chip =~ tr/a-z/A-Z/;
    my @split_flags = split / /, $flags;
    my $cmake_flags = '';
    for(sort @split_flags)
    {
        $cmake_flags = $cmake_flags." -D".$_;
    }

    chdir $exec_dir;
    my ($seconds_before, $seconds_after);
    timeout $timeout =>  sub {
        $seconds_before = time();

        say "CMAKE_GENERATOR=Ninja cmake -S $make_path -B $make_path/build".-$target_name."  -DCONFIG_GAP_SDK_HOME=$sdk_root_path -DCMAKE_MODULE_PATH=$sdk_root_path/utils/cmake -DCONFIG_CHIP=$chip -DCONFIG_CHIP_VERSION=$chip_version -DBOARD=$ENV{'BOARD_NAME'} $cmake_flags";
        $res = system ("CMAKE_GENERATOR=Ninja cmake -S $make_path -B $make_path/build".-$target_name."  -DCONFIG_GAP_SDK_HOME=$sdk_root_path -DCMAKE_MODULE_PATH=$sdk_root_path/utils/cmake -DCONFIG_CHIP=$chip -DCONFIG_CHIP_VERSION=$chip_version -DBOARD=$ENV{'BOARD_NAME'} $cmake_flags");
        say "cmake --build $make_path/build";

        if (not $compile_only)
        {
            $res = system("cmake --build $make_path/build".-$target_name);
            say "cmake --build $make_path/build --target run";
            $res = system("cmake --build $make_path/build".-$target_name."  --target run");
            $seconds_after = time();
            $res = $res >>=8;
            say $target_name." : Result is: ".$res;
            if($post == 1)
            {
                $res = system("cmake --build build --target postrun");
            }
        }
    };
    my $seconds = $seconds_after - $seconds_before;
    if ($@){
        # operation timed-out
        my $cwd = cwd;
        say "Test ".cwd." variant: ".$target_name." failed with timeout";
    }
    push_test_result(!$res, $target_name,$seconds);

    return $res;
}

sub cmd_runner {
    while (defined(my @args = $test_queue->dequeue())) {
        my $_args = pop(@args);
        @_ = @$_args;
        my $builder = pop(@_);
        if ($builder eq 'make'){
            exc_cmd_make(@_);
        }
        if ($builder eq 'cmake'){
            exc_cmd_cmake(@_);
        }
    }
}

sub check_len {
    my $config_len = shift;
    my $target_len = shift;

    if(not defined $durations{$config_len})
    {
        die "Selected duration \"${config_len}\" is not valid\n";
    }

    if(not defined $durations{$target_len})
    {
        die "Variant duration \"${target_len}\" is not valid\n";
    }

    if($durations{$config_len} >= $durations{$target_len})
    {
        return 1;
    }
    return 0;
}

sub process_yml {
    my $exec_dir = shift;
    my $config_platform = shift;
    my $config_chip = shift;
    my $config_board = shift;
    my $config_os = shift;
    my $config_len = shift;
    my $config_tag = shift;
    my $job_index = shift;
    my $job_total = shift;
    my $chip_version = shift;
    my $builder = shift;
    my $sdk_root_path = shift;

    # enter the test dir
    chdir $exec_dir;

    # read the yml file, and harvest informations
    my @test_variants = gaptest::Loader::load_file('gaptest.yml');

    foreach my $test_variant (@test_variants)
    {
        if(check_len($config_len, $test_variant->{duration})
            && (grep( /^$config_tag$/, @{$test_variant->{tags}}))
            && (grep( /^$config_os$/, @{$test_variant->{os}}))
            && (grep( /^$config_chip$/, @{$test_variant->{chips}}))
            && (grep( /^$config_platform$/, @{$test_variant->{platforms}})))
        {
            # Only launch the test if it is belong to the job
            if (($tests_job_counter % $job_total) ne ($job_index - 1))
            {
                $tests_job_counter++;
                next;
            }
            $tests_job_counter++;

            if ($list_select_tests)
            {
                # list selected test without executing it
                push(@test_list, $test_variant->{name});
                next;
            }

            $test_variant->{flags} = "DURATION=".$config_len." ".$test_variant->{flags};

            # push in workqueue
            my @arg = ($config_os,
                $config_platform,
                $test_variant->{flags},
                $test_variant->{compile_only},
                '',
                0,
                0,
                $test_variant->{timeout},
                $test_variant->{name},
                $exec_dir,
                $config_chip,
                $chip_version,
                $sdk_root_path,
                $builder);
            $test_queue->enqueue(\@arg);
            $tests_nb++;
        }
    }
}

sub create_default_gaptest {
    my $filename = "gaptest.yml";
    # verify no gaptest.yml
    if (not -e $filename)
    {
        # create file
        open(my $FH,'>',$filename) or die "Could not create gaptest.yml";

        # dump gaptest.yml
        print $FH "name: TEST_NAME_TO_CHANGE\n";
        print $FH "platforms:\n";
        print $FH "    - gvsoc\n";
        print $FH "os:\n";
        print $FH "    - freertos\n";
        print $FH "    - pulpos\n";
        print $FH "chips:\n";
        print $FH "    - gap8\n";
        print $FH "    - gap9\n";
        print $FH "variants:\n";
        print $FH "    std:\n";
        print $FH "        name: standard\n";
        print $FH "        tags:\n";
        print $FH "            - integration\n";
        print $FH "            - release\n";
        print $FH "        duration: standard\n";
        print $FH "        flags: ~\n";

        # close file
        close($FH);
    }
    else
    {
        print "A file named \"gaptest.yml\" already exists\n";
    }
}

sub gaptest_find_cb {
    push @test_files_list, $File::Find::dir if /gaptest.yml$/;
}

sub print_help{
    print("\n");
    print("USAGE: gaptest [options]\n");
    print("\n");
    print("DESCRIPTION:\n");
    print("    GapTest is a test runner for GAP SDK.\n");
    print("    To use it, please at least specify --chip.\n");
    print("\n");
    print("ARGUMENTS:\n");
    print("    --chip <chip>         : select the chip. Available choices are gap8, gap9.\n");
    print("    --platform <platform> : select the test platform (default: gvsoc)\n");
    print("                            Available choices are rtl, fpga, gvsoc, board.\n");
    print("    --os <os>             : select the operating system (default: freertos)\n");
    print("                            Available choices are freertos, pulpos.\n");
    print("    --length <len>        : select the test length. (default: standard)\n");
    print("                            Available choices are fast, standard, long, stress.\n");
    print("    --tag <tag>           : select a tag. (default: integration)\n");
    print("    --no-fail             : fail on first test.\n");
    print("    --nb-proc <nb>        : select the number of processors (default: 1)\n");
    print("    --jobs <job>          : Divide the testsuite into multiple smaller testsuites\n");
    print("                            <job> is a string formatted as \"X/N\" where X is the job index\n");
    print("                            and N is the total number of jobs.\n");
    print("                            This feature is useful to parallelize long testsuites, as you\n");
    print("                            can launch a single testsuite on multiple test runners.\n");
    print("\n");
    print("    --init                : create a default \"gaptest.yml\" file and exit\n");
    print("    --list-selected       : list selected tests and exit\n");
    print("    --help                : display help and exit\n");
    print("\n");
    print("For more information, please refer to the documentation\n");
}

sub usage {
    print_help();
}

sub nb_test_run {
    lock(@test_failed);
    lock(@test_passed);
    return (scalar(@test_failed) + scalar(@test_passed));
}

sub dump_junit_report_testcase {
    my $name = shift;
    my $testcase = "<testcase name=\"".$name."\""." time=\"".$test_time{$name}."\" >\n";
    return $testcase;
}

sub dump_junit_report_failure {
    my $name = shift;
    my $failure = "<failure type=\"TestFailed\"\nmessage=\"KO: ".$name."\"></failure>\n";
    return $failure;
}

sub dump_junit_report {
    my $filename = shift;
    my $timestamp = shift;
    lock(@test_failed);
    lock(@test_passed);
    say "Dumping report at: ".cwd."/".$filename;
    open(REPORT,'>',$filename) or die $!;
    my $nb_test_failed = scalar(@test_failed);
    my $nb_test_passed = scalar(@test_passed);
    my $total = $nb_test_failed + $nb_test_passed;
    my $header_failed = "failures=\"".$nb_test_failed."\"";
    my $header_tests = "tests=\"".$total."\"";
    # next two are unsuported and set at 0
    my $header_errors =  "errors=\"0\"";
    my $header_skipped = "skipped=\"0\"";
    my $header_timestamp = "timestamp=\".$timestamp.\"";
    my $header_name = "testsuite name=\"testsuite\""." ".$header_timestamp;
    my $header =  "<".$header_name." ".$header_failed." ".$header_tests." ".$header_errors." ".$header_skipped.">\n";
    print REPORT $header;
    for(@test_failed) {
        print REPORT dump_junit_report_testcase($_);
        print REPORT dump_junit_report_failure($_);
        print REPORT "</testcase>\n";
    }
    for(@test_passed) {
        print REPORT dump_junit_report_testcase($_);
        print REPORT "</testcase>\n";
    }
    print REPORT "</testsuite>\n";
    close(REPORT);
    say "Report dumped";
}

### ENTRY


# First parse some args:
# --chip // -c : chip identifier
# --tag // -t : filter by matching tags
# --length // -l : length of tests (fast/standard/long/stress)
# --os : os to use
# --board: which board to use (gapuino, gapoc etc)
# --list: list all tests which will be run with current config (and their paths)
# --dry-run: prepare all comands, and dump them, without executing

my $builder = 'make';
my $sdk_root_path = '';
my $chip_version = '';
my $chip = '';
my $tag = 'integration';
my $board = '';
my $platform = 'gvsoc';
my $os = 'freertos';
my $len = 'standard';
my $threads = '';
my $nb_proc = 1;
my $jobs = '1/1'; # contains "X/N" where X = job index, N = total number of jobs
my $test_init = 0;

while (@ARGV) {
    my $arg = shift(@ARGV);
    # long options
    ($arg eq '--chip') && do { $chip = shift(@ARGV); next };
    ($arg eq '--chip-version') && do { $chip_version = shift(@ARGV); next };
    ($arg eq '--sdk-root-path') && do { $sdk_root_path = shift(@ARGV); next };
    ($arg eq '--os') && do { $os = shift(@ARGV); next };
    ($arg eq '--platform') && do { $platform = shift(@ARGV); next };
    ($arg eq '--tag') && do { $tag = shift(@ARGV); next};
    ($arg eq '--length') && do { $len = shift(@ARGV); next};
    ($arg eq '--no-fail') && do { $stop_first_fail = 1; next};
    ($arg eq '--nb-proc') && do { $nb_proc = shift(@ARGV); next};
    ($arg eq '--jobs') && do { $jobs = shift(@ARGV); next};
    ($arg eq '--help') && do { print_help(); exit 0};
    ($arg eq '--list-selected') && do { $list_select_tests = 1; next};
    ($arg eq '--init') && do { $test_init = 1; next};
    ($arg eq '--builder') && do { $builder = shift(@ARGV); next };
    # short options
    ($arg eq '-c') && do { $chip = shift(@ARGV); next };
    ($arg eq '-t') && do { $tag = shift(@ARGV); next};
    ($arg eq '-b') && do { $board = shift(@ARGV); next};
    # unrecognized
    ($arg =~ m/^-.+/) && do { print "Unknown option: $arg\n"; &usage(); die};
}

if ($test_init)
{
    # create_default gaptest.yml
    create_default_gaptest;
    exit 0;
}

if($chip eq '')
{
    usage();
    die "Chip not specified, aborting."
}


for(my $i = 0; $i < $nb_proc; $i++)
{
    my $thr = threads->create('cmd_runner');
    $thr->detach();
}

#$test_queue->limit = $nb_proc;

find(\&gaptest_find_cb, '.');
my $cwd = cwd;
$basedir = cwd;

# get the index and total number of jobs
my $job_index = 1;
my $job_total = 1;
if ($jobs =~ /^([0-9]+)\/([0-9]+)$/) {

    $job_index = int($1);
    $job_total = int($2);
    if ($job_index > $job_total or $job_index < 1)
    {
        die("Incorrect job index: ${job_index} should be between 1 and ${job_total}\n");
    }
}
else {
    die("Incorrect number of jobs: ${jobs}\n");
}


my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
my $timestamp = (1900+$year)."-".(1+$mon)."-".$mday."T".$hour.":".$min.":".($sec%60);

for (sort @test_files_list)
{
    chdir $cwd;
    process_yml($_,$platform,$chip,$board,$os,$len,$tag,$job_index,$job_total,$chip_version,$builder,$sdk_root_path);
}

while(nb_test_run() < $tests_nb)
{
    sleep 1;
}

# go back to basedir
chdir $basedir;

if($list_select_tests)
{
    my $nb_test_total = scalar(@test_list);
    say "---------------------------------------------------------------------------";
    say "Tests:";
    say "---------------------------------------------------------------------------";
    for (@test_list)
    {
        say "- $_";
    }
    say "---------------------------------------------------------------------------";
    say "Total: ${nb_test_total}";
    say "---------------------------------------------------------------------------";

    exit 0;
}
else
{
    my $STATUS_KO = color("bold bright_red")."KO".color("reset");
    my $STATUS_OK = color("bold green")."OK".color("reset");

    my $nb_test_failed = scalar(@test_failed);
    my $nb_test_passed = scalar(@test_passed);
    my $nb_test_total = $tests_nb;

    say "---------------------------------------------------------------------------";
    say "Test results:";
    say "---------------------------------------------------------------------------";

    for (@test_failed)
    {
        say "[${STATUS_KO}] ".$_;
    }
    for (@test_passed)
    {
        say "[${STATUS_OK}] ".$_;
    }

    say "---------------------------------------------------------------------------";
    if ($nb_test_failed)
    {
        say "Testsuite failed (failures: ${nb_test_failed}/${nb_test_total})";
    }
    else
    {
        say "Testsuite succeeded (passed: ${nb_test_passed}/${nb_test_total})";
    }
    say "---------------------------------------------------------------------------";

    dump_junit_report("./report.xml",$timestamp);
    exit scalar(@test_failed);
}
